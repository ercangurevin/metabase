name: "Claude Code Bug Fix"

on:
  issues:
    types:
      - labeled
  pull_request_review:
    types:
      - submitted
  workflow_dispatch:
    inputs:
      issue_number:
        description: "Issue number to fix"
        required: true
        type: string
      override_employee_check:
        description: "Override employee check for issue creator"
        required: false
        default: false
        type: boolean

jobs:
  check-employee-and-issue:
    runs-on: ubuntu-latest
    timeout-minutes: 2
    permissions:
      contents: read
      issues: read
    if: |
      (github.event_name == 'issues' && github.event.label.name == 'Claude Bug Fix' && github.event.issue.state == 'open') ||
      (github.event_name == 'workflow_dispatch') ||
      (github.event_name == 'pull_request_review' && github.event.review.state == 'changes_requested' && startsWith(github.event.pull_request.head.ref, 'claude-fix/'))
    outputs:
      is_employee: ${{ steps.check_employee.outputs.is_employee }}
      issue_number: ${{ steps.get_issue.outputs.issue_number }}
      issue_data: ${{ steps.get_issue.outputs.issue_data }}
      issue_comments: ${{ steps.get_issue.outputs.issue_comments }}
      pr_reviews: ${{ steps.get_issue.outputs.pr_reviews }}
      trigger_type: ${{ steps.get_issue.outputs.trigger_type }}
    steps:
      - name: Generate GitHub App Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.METABASE_BOT_APP_ID }}
          private-key: ${{ secrets.METABASE_BOT_APP_PRIVATE_KEY }}

      - name: Get issue data
        id: get_issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const { getIssueData } = require('${{ github.workspace }}/.github/scripts/get-issue-data.js');
            
            try {
              const result = await getIssueData({
                context,
                github,
                manualIssueNumber: '${{ github.event.inputs.issue_number }}'
              });
              
              const { issueNumber, issueData, employeeComments, prReviews, triggerType } = result;
              
              core.setOutput('issue_number', issueNumber);
              core.setOutput('issue_data', JSON.stringify(issueData));
              core.setOutput('issue_comments', JSON.stringify(employeeComments));
              core.setOutput('pr_reviews', JSON.stringify(prReviews));
              core.setOutput('trigger_type', triggerType);

              console.log(`Trigger type: ${triggerType}`);
              console.log(`Issue #${issueNumber}: ${issueData.title}`);
              console.log(`Issue author: ${issueData.user.login}`);
              console.log(`Issue has ${employeeComments.length} comments from employees`);
              if (prReviews.length > 0) {
                console.log(`Found ${prReviews.length} reviews requesting changes from employees`);
              }
            } catch (error) {
              core.setFailed(error.message);
            }

      - name: Check if issue creator is a Metabase employee
        id: check_employee
        uses: actions/github-script@v7
        env:
          ISSUE_DATA: ${{ steps.get_issue.outputs.issue_data }}
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const issueData = JSON.parse(process.env.ISSUE_DATA);
            const issueAuthor = issueData.user.login;

            // Log if override is active (but still check actual employee status)
            if (context.eventName === 'workflow_dispatch' && '${{ github.event.inputs.override_employee_check }}' === 'true') {
              console.log(`Employee check override is active - will proceed regardless of ${issueAuthor}'s membership status.`);
            }

            try {
              // Check if user is a member of the metabase organization (including private members)
              const { data: membership } = await github.rest.orgs.getMembershipForUser({
                org: 'metabase',
                username: issueAuthor
              });

              if (membership.state === 'active') {
                console.log(`User ${issueAuthor} is an active member of the Metabase organization. Proceeding with bug fix automation.`);
                core.setOutput('is_employee', 'true');
              } else {
                console.log(`User ${issueAuthor} is not an active member of the Metabase organization. Skipping bug fix automation.`);
                core.setOutput('is_employee', 'false');
              }
            } catch (error) {
              if (error.status === 404) {
                console.log(`User ${issueAuthor} is not a member of the Metabase organization. Skipping bug fix automation.`);
              } else {
                console.error('Error checking organization membership:', error);
              }
              core.setOutput('is_employee', 'false');
            }

  auto-fix-bug:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    needs: check-employee-and-issue
    if: needs.check-employee-and-issue.outputs.is_employee == 'true' || github.event.inputs.override_employee_check == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up git configuration
        run: |
          git config --global user.name "Claude Code[bot]"
          git config --global user.email "noreply@anthropic.com"

      - name: Prepare dynamic issue info
        id: prepare_issue_info
        uses: actions/github-script@v7
        env:
          ISSUE_DATA: ${{ needs.check-employee-and-issue.outputs.issue_data }}
          ISSUE_COMMENTS: ${{ needs.check-employee-and-issue.outputs.issue_comments }}
          PR_REVIEWS: ${{ needs.check-employee-and-issue.outputs.pr_reviews }}
          TRIGGER_TYPE: ${{ needs.check-employee-and-issue.outputs.trigger_type }}
        with:
          script: |
            const issueData = JSON.parse(process.env.ISSUE_DATA);
            const issueComments = JSON.parse(process.env.ISSUE_COMMENTS);
            const prReviews = JSON.parse(process.env.PR_REVIEWS);
            const triggerType = process.env.TRIGGER_TYPE;
            const issueNumber = '${{ needs.check-employee-and-issue.outputs.issue_number }}';

            // Convert issue title to kebab case
            const issueTitle = issueData.title || 'untitled';
            const kebabTitle = issueTitle
              .toLowerCase()
              .replace(/[^a-z0-9]+/g, '-')
              .replace(/^-+|-+$/g, '')
              .replace(/-+/g, '-')
              .substring(0, 50); // Limit length

            // Create base branch name
            const baseBranchName = `claude-fix/issue-${issueNumber}-${kebabTitle}`;
            core.exportVariable('BASE_BRANCH_NAME', baseBranchName);

            // Export issue info for the prompt
            core.exportVariable('ISSUE_NUMBER', issueNumber);
            core.exportVariable('ISSUE_TITLE', issueData.title);
            core.exportVariable('ISSUE_AUTHOR', issueData.user.login);
            core.exportVariable('ISSUE_CREATED', issueData.created_at);
            core.exportVariable('ISSUE_BODY', issueData.body || 'No description provided');
            core.exportVariable('TRIGGER_TYPE', triggerType);

            // Format comments for the prompt
            let commentsText = '';
            if (issueComments.length > 0) {
              commentsText = issueComments.map(comment => 
                `**Comment by @${comment.user.login} on ${comment.created_at}:**\n${comment.body}`
              ).join('\n\n---\n\n');
            }
            core.exportVariable('ISSUE_COMMENTS_FORMATTED', commentsText);

            // Format PR reviews for the prompt
            let reviewsText = '';
            if (prReviews.length > 0) {
              reviewsText = prReviews.map(review => 
                `**Review by @${review.user.login} on ${review.submitted_at} (Changes Requested):**\n${review.body || 'No review comment provided'}`
              ).join('\n\n---\n\n');
            }
            core.exportVariable('PR_REVIEWS_FORMATTED', reviewsText);

      - name: Determine branch strategy
        run: |
          # Use the base branch name (no counters)
          BRANCH_NAME="${{ env.BASE_BRANCH_NAME }}"

          # Check if this exact branch already exists
          if git branch -r --list "origin/${BRANCH_NAME}" | grep -q .; then
            echo "Branch already exists: $BRANCH_NAME"
            echo "Will push to existing branch and skip PR creation"
            echo "BRANCH_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Creating new branch: $BRANCH_NAME"
            echo "Will create new PR"
            echo "BRANCH_EXISTS=false" >> $GITHUB_ENV
          fi

          # Export the branch name
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Prepare bug fix prompt
        id: prepare_prompt
        run: |
          # Set context-specific variables
          if [ "${{ env.TRIGGER_TYPE }}" = "pull_request_review" ]; then
            CONTEXT_INTRO="You are helping to improve an automated bug fix based on reviewer feedback for GitHub issue #${{ env.ISSUE_NUMBER }}."
            CONTEXT_SECTIONS="
            ## Previous Fix Attempt - NEEDS IMPROVEMENT
            A previous automated fix was attempted for this issue, but reviewers have requested changes.

            ## Reviewer Feedback (MUST ADDRESS)
            ${{ env.PR_REVIEWS_FORMATTED }}"
            STEP_1="1. **Review the current PR branch** - Examine the existing fix attempt on branch \`${{ env.BRANCH_NAME }}\`"
            STEP_2="2. **Understand reviewer feedback** - Carefully read all review comments above"
            STEP_3="3. **Address specific concerns** - Modify the existing fix to address reviewer feedback"
            PRIORITY_GUIDELINE="- **PRIORITY**: Address reviewer feedback first and foremost"
            FINAL_MESSAGE="Start by examining the current fix and understanding exactly what reviewers want changed."
            PR_UPDATE_NOTE="- The existing PR will be updated with your improvements"
            SCRATCHPAD_NOTE="- Use this directory for ALL temporary verification files"
          else
            CONTEXT_INTRO="You are helping to automatically fix a bug reported in GitHub issue #${{ env.ISSUE_NUMBER }}."
            CONTEXT_SECTIONS=""
            STEP_1="1. **Analyze the issue description and comments** - Understand what the issue is describing"
            STEP_2="  a. Pay particular attention to reproduction steps and if there's an agreed upon fix."
            STEP_3="2. **Search the codebase** - Use Grep and Glob tools to find relevant files"
            PRIORITY_GUIDELINE="- **IMPORTANT**: Focus only on fixing the reported bug, don't make unrelated changes"
            FINAL_MESSAGE="Start by understanding the bug and then systematically work toward a solution."
            PR_UPDATE_NOTE=""
            SCRATCHPAD_NOTE="- Use this directory for ALL temporary verification files. However, prefer using production test files rather than adhoc ones."
          fi

          # Generate the unified prompt
          cat << EOF >> $GITHUB_ENV
          BUG_FIX_PROMPT<<PROMPT_END
          $CONTEXT_INTRO

          ## Bug Report Details
          **Title:** ${{ env.ISSUE_TITLE }}
          **Reporter:** ${{ env.ISSUE_AUTHOR }}
          **Created:** ${{ env.ISSUE_CREATED }}

          **Description:**
          ${{ env.ISSUE_BODY }}

          **Comments:**
          ${{ env.ISSUE_COMMENTS_FORMATTED }}$CONTEXT_SECTIONS

          ## Instructions
          $STEP_1
          $STEP_2
          $STEP_3
          $(if [ "${{ env.TRIGGER_TYPE }}" != "pull_request_review" ]; then echo "3. **Implement a fix** - Follow existing code patterns and conventions"; fi)
          $(if [ "${{ env.TRIGGER_TYPE }}" = "pull_request_review" ]; then echo "4"; else echo "4"; fi). **Test thoroughly** - Run tests using commands in CLAUDE.md:
             - JavaScript/TypeScript: \`yarn test-unit path/to/file.unit.spec.js\`
             - Clojure: \`clojure -X:dev:test :only namespace/test-name\`
             - Lint: \`yarn lint-eslint-pure\` for JS/TS, \`./bin/mage kondo <file>\` for Clojure
          $(if [ "${{ env.TRIGGER_TYPE }}" != "pull_request_review" ]; then echo "5. **Verify the fix** - Ensure tests pass and code follows conventions"; fi)

          ## Important Guidelines
          $PRIORITY_GUIDELINE
          - Follow the development patterns in CLAUDE.md
          $(if [ "${{ env.TRIGGER_TYPE }}" != "pull_request_review" ]; then echo "- Write failing tests first, then fix them"; fi)
          $(if [ "${{ env.TRIGGER_TYPE }}" != "pull_request_review" ]; then echo "- Work in small, testable increments"; fi)
          $(if [ "${{ env.TRIGGER_TYPE }}" = "pull_request_review" ]; then echo "- Keep changes minimal and focused on reviewer concerns"; fi)
          - Don't commit changes - leave that for the workflow$PR_UPDATE_NOTE

          ## Scratchpad Directory
          A \`.claude-scratchpad/\` directory has been created for your temporary files:
          $SCRATCHPAD_NOTE
          - Only modify actual production code in the main repository directories
          - The scratchpad will be cleaned up automatically$(if [ "${{ env.TRIGGER_TYPE }}" != "pull_request_review" ]; then echo " - nothing from it will be committed"; fi)

          $FINAL_MESSAGE
          PROMPT_END
          EOF

      - name: Create scratchpad directory for Claude
        run: |
          # Create a scratchpad directory for Claude to use for temporary files
          mkdir -p .claude-scratchpad
          echo "Scratchpad directory created for Claude's temporary verification files"

      - name: Generate GitHub App Token for Claude
        uses: actions/create-github-app-token@v1
        id: claude-app-token
        with:
          app-id: ${{ secrets.METABASE_BOT_APP_ID }}
          private-key: ${{ secrets.METABASE_BOT_APP_PRIVATE_KEY }}

      - name: Generate Bug Fix with Claude Code
        uses: anthropics/claude-code-action@beta
        with:
          mode: agent
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ steps.claude-app-token.outputs.token }}
          direct_prompt: ${{ env.BUG_FIX_PROMPT }}
          timeout_minutes: "25"
          allowed_tools: "Bash(yarn test-unit*),Bash(yarn lint-eslint-pure),Bash(./bin/mage*),Bash(clojure*),Bash(find*),Bash(ls*),Bash(grep*),Write,Read,Glob,Grep,Edit,MultiEdit"
          disallowed_tools: "Bash(git commit*),Bash(git push*),Bash(gh*)"

      - name: Clean up scratchpad directory
        run: |
          # Remove the scratchpad directory so its contents don't get committed
          rm -rf .claude-scratchpad/
          # Remove output file generated by Claude Code action
          rm -f output.txt
          echo "Scratchpad directory and action output files cleaned up"

      - name: Check for changes and analysis
        id: check_changes
        run: |
          # Now check for actual code changes (excluding analysis file)
          if [ -n "$(git status --porcelain)" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected:"
            git status --short
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes made by Claude."
          fi

      - name: Get issue team labels and prepare reviewers
        if: steps.check_changes.outputs.has_changes == 'true'
        id: prepare_reviewers
        uses: actions/github-script@v7
        env:
          ISSUE_DATA: ${{ needs.check-employee-and-issue.outputs.issue_data }}
        with:
          script: |
            // Get existing team labels from the issue
            const issueData = JSON.parse(process.env.ISSUE_DATA);
            const issueLabels = issueData.labels.map(label => label.name);
            const teamLabels = issueLabels.filter(label => label.startsWith('.Team/'));

            console.log('Issue labels:', issueLabels);
            console.log('Team labels found:', teamLabels);

            // Add issue creator as reviewer
            const issueCreator = issueData.user.login;

            core.setOutput('team_labels', teamLabels.join(','));
            core.setOutput('reviewers', issueCreator);

            console.log('Reviewer:', issueCreator);

      - name: Create Pull Request
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.BRANCH_NAME }}
          base: master
          commit-message: |
            Fix: ${{ env.ISSUE_TITLE }}

            Fixes #${{ env.ISSUE_NUMBER }}

            🤖 Generated with [Claude Code](https://claude.ai/code)

            Co-Authored-By: Claude <noreply@anthropic.com>
          committer: "Claude Code[bot] <noreply@anthropic.com>"
          author: "Claude Code[bot] <noreply@anthropic.com>"
          title: "Fix: ${{ env.ISSUE_TITLE }}"
          body: |
            This PR automatically fixes the bug reported in #${{ env.ISSUE_NUMBER }}.

            ## Bug Report
            **Original Issue:** #${{ env.ISSUE_NUMBER }}
            **Reporter:** @${{ env.ISSUE_AUTHOR }}
            **Issue Title:** ${{ env.ISSUE_TITLE }}

            ## Automated Fix
            🤖 This fix was generated automatically by Claude Code based on the issue description.

            **Please review carefully:**
            - [ ] The fix addresses the reported issue
            - [ ] Tests pass and code follows conventions
            - [ ] No unrelated changes were introduced
            - [ ] The solution is appropriate and maintainable

            ## Next Steps
            - Review the changes and test thoroughly
            - If the fix looks good, approve and merge
            - If issues are found, either fix them or close this PR

            ---
            Closes #${{ env.ISSUE_NUMBER }}

            🤖 Generated with [Claude Code](https://claude.ai/code)

            Co-Authored-By: Claude <noreply@anthropic.com>
          labels: |
            ${{ steps.prepare_reviewers.outputs.team_labels }}
            automated-fix
            ci skip
          reviewers: ${{ steps.prepare_reviewers.outputs.reviewers }}

      - name: Log existing branch update
        if: steps.check_changes.outputs.has_changes == 'true' && env.BRANCH_EXISTS == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            console.log('🔄 Updated existing branch: ${{ env.BRANCH_NAME }}');
            console.log('The changes have been pushed to the existing PR for this issue.');

      - name: Log analysis for no changes
        if: steps.check_changes.outputs.has_changes == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            console.log('🤖 No code changes were made by Claude.');
